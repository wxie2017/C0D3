# Setup Basics

* install nvm - node version manager
The
[[https://www.notion.so/Setup-Instructions-fc8f8fcc1376482ead839fa6b1034cb4#10ab6286f4d942c58bd330f68cb8cb95][setup
session]] is very simple. However, I still have problem with
[[https://github.com/nvm-sh/nvm][install nvm]] :

** curl
#+BEGIN_SRC shell
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
#+END_SRC

#+RESULTS:
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused

@hwong0305 suggested that I should try
#+BEGIN_SRC shell
curl -o- http://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
#+END_SRC

I did not try because I started 'git installation'.

** wget
 #+BEGIN_SRC shell
wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
 #+END_SRC

 #+RESULTS:
 (no result)

** git
 #+BEGIN_SRC shell
cd
git clone https://github.com/nvm-sh/nvm.git .nvm
cd ~/.nvm
git checkout v0.35.3
. nvm.sh
command -v nvm # should output nvm
 #+END_SRC

 It works.

* install node
** using nvm
#+BEGIN_SRC shell
nvm install node # the lastest version
nvm use node
#+END_SRC

** guix
   #+begin_src shell
   guix package install node
   node --version
   #+end_src

* run test.js
#+BEGIN_SRC js
a = "hello"
console.log(a)
#+END_SRC

run it in shell:
#+BEGIN_SRC shell
node test.js
#+END_SRC

#+RESULTS:
: hello

This is everything for setting up node.js.
* install c0d3
From the page, you may see the message:
"Please update your CLI client by opening your terminal and running the command:
npm i -g c0d3"
It means you need install c0d3, just do
#+BEGIN_SRC shell
nvm use node
npm -v
npm i -g c0d3 # failed in guix - issue 2
#+END_SRC
The CLI for c0d3 will be added.
* setup curriculum
  #+begin_src shell
  git clone https://github.com/garageScript/curriculum
  cd curriculum
  npm install
  git checkout master
  git checkout -b p1 # create new branch for problem 1
  # edit solution for problem 1: js0/1.js
  npm run test
  git add js0/1.js
  git commit -m "solve problem 1"
  c0d3 login
  c0d3 submit
  git checkout master
  git merge p1
  ...
  git checkout p1
  git merge master
  #+end_src
* setup jest
Jest is the test framework to run our tests.
** install jest
#+BEGIN_SRC shell
npm i jest
npm i -g jest # install globally
cd your_project_folder
npm init -y # initialize your project
#+END_SRC
** create solution file
Create a file for your solutions in your project folder. Let's call it
preflight.js.
** create a test file
Create a file for the tests in your project folder. Call it preflight.test.js. The word test in the
filename is important; Jest will only run files with test in the filename.
** link solution file and test file
First tell your test file to include the file that will have your solutions:
#+BEGIN_SRC js
// fn will be an object with all your preflight solutions
const fn = require('./preflight.js')
#+END_SRC
** example using jest
These examples will be your tests and the following instructions will show you
how to create tests and run them.
*** step 1
In the preflight.js file, set up the object that will be exported to the test
file and write your solution. For now, you just need to know that allFuns is an
object.
#+BEGIN_SRC js
const allFuns = {}

const removeCharX = ( ... ) => {
  // Your code goes here
}

allFuns.removeCharX = removeCharX // You need this line for every function
                                  // you write
#+END_SRC
*** step 2
Add this line to preflight.js. As you solve more exercises, just keep this line
at the end.
#+BEGIN_SRC js
module.exports = allFuns
#+END_SRC
*** step 3
Open the Tests toggle and paste the code into your preflight.test.js file.
#+BEGIN_SRC js
describe('removeCharX function', () => {
    it('should remove the first character', () => {
        const str = "We're in the endgame now."
        const result = fn.removeCharX(str, 0)
        expect(result).toEqual("e're in the endgame now.")
    })
    it('return the original string', () => {
        const str = "a"
        const result = fn.removeCharX(str, 3)
        expect(result).toEqual("a")
    })
    it('return the original string', () => {
        const str = "abc"
        const result = fn.removeCharX(str, -3)
        expect(result).toEqual("abc")
    })
})
#+END_SRC
*** step 4
Run the test with
#+BEGIN_SRC shell
jest preflight.test.js
node_modules/jest/bin/jest.js preflight.test.js # run from the library
#+END_SRC
*** step 5
To have your tests automatically re-run as you edit the code or add new tests,
run jest with the --watch option in one terminal and leave it running. As you
change your code in your editor your tests will run automatically. Press q to
exit when you're done.
#+BEGIN_SRC shell
jest --watch preflight.test.js
#+END_SRC
*** summary
For each new exercise, click the Tests toggle and add the tests to your
preflight.test.js file. Then add your solution to the preflight.js file and
re-run the tests (or leave them running with --watch).
