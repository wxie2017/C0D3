# JS 0 - Foundations

* Strings
A string can be words, sentences, or a bunch of characters. To make a string,
you can use double quotes `"` , single quotes `'`, or ``` (the key to the left
of 1 on most keyboards).

* Template Literals (Template Strings)
Using ``` (backticks) and `${expression}` (placeholder) allows us to put the
variables directly into the string.

** Exercise: Rewrite the `story` variable to use ```
original code:
#+BEGIN_SRC js
const actor = "We"
const location = "farmers' market"

const story = actor + " plan to go to a " + location + " tomorrow"
#+END_SRC

rewritten code:
#+BEGIN_SRC js
const actor = "We"
const location = "farmers' market"

const story = `${actor} plan to go to a ${location} tomorrow`

console.log(story)
#+END_SRC

#+RESULTS:
: We plan to go to a farmers' market tomorrow
: undefined

* Truthy / Falsey
**Falsey:** There are only **six falsey values** in JavaScript:

`false`, `0`, `""` (empty string), `undefined`, `null`, `NaN` (Not a Number)

**Truthy:** EVERYTHING ELSE is truthy!

|-----------+--------+-----------------|
| data type | Falsey | Truthy          |
|-----------+--------+-----------------|
| Number    | 0, NaN | Everything else |
|-----------+--------+-----------------|
| String    | ""     | Everything else |
|-----------+--------+-----------------|
| Boolean   | false  | true            |
|-----------+--------+-----------------|

* Function
** Function Syntax
*** definition 1
#+BEGIN_SRC js
// syntax for defining a function
function name (parameter1, parameter2, parameter3){
// code to be executed
}

// call
const abc = name(2, 5, 9)
#+END_SRC
*** definition 2
#+BEGIN_SRC js
const fn = function (a, b) {
	return a + b
}

// call
const ab = fn(a, b)
#+END_SRC
*** definition 3
#+BEGIN_SRC js
const myFunction = new Function("a", "b", "return a + b")

// call
const x = myFunction(4, 3)
#+END_SRC
*** definition 4
#+BEGIN_SRC js
const name = (parameter1, parameter2, parameter3) => {
  // statements
}

// call
const result = name(1, 2, 3)
#+END_SRC
** Exercise
*** Please define a function that returns a function:
#+BEGIN_SRC js
const fn = () => {
    return () => {
        return 0
    }
}

// call
const a = fn()
const b = a()
console.log(b)
#+END_SRC

#+RESULTS:
*** Write an arrow function named solution that runs a function called console.log three times and return a number.
#+BEGIN_SRC js
const solution = () => {
    console.log(1)
    console.log(2)
    console.log(3)
    return 4
}

//call
const a = solution()
console.log(a)
#+END_SRC

#+RESULTS:
*** Write an arrow function named solution that returns a function. When the returned function is called, console.log will run three times.
#+BEGIN_SRC js
const solution = () => {
    return () => {
        console.log(1)
        console.log(2)
        console.log(3)
        }
}

//call
const c = solution()
const d = c()
#+END_SRC

#+RESULTS:
